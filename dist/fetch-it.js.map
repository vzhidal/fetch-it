{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///fetch-it.js","webpack:///webpack/bootstrap fc648498d6fe99b0d1c0","webpack:///./src/fetch-it.js","webpack:///./~/isomorphic-fetch/fetch-npm-browserify.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","global","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","isFormData","o","toString","isURLSearchParams","isBlob","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","DEFAULT_CONFIG","FetchIt","config","middlewares","url","options","method","data","assign","defaultMethod","body","JSON","stringify","e","Request","urlOrRequest","request","_len","arguments","_key","_createRequest","apply","concat","promise","Promise","resolve","chain","fetch","undefined","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","middleware","unshift","requestError","push","response","responseError","err","then","shift","_middlewares","_request","jsonMiddleware","res","json","FetchItFactory","addMiddlewares","clearMiddlewares","_instance","_instance2","get","_instance3","post","_instance4","patch","_instance5","put","_instance6","_instance7","head","self","bind","normalizeName","name","String","test","toLowerCase","normalizeValue","iteratorFor","items","support","iterable","Headers","headers","map","forEach","append","getOwnPropertyNames","consumed","bodyUsed","reject","fileReaderReady","reader","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","arrayBuffer","ArrayBuffer","Error","set","type","rejected","text","decode","parse","normalizeMethod","upcased","toUpperCase","methods","indexOf","input","credentials","mode","referrer","form","trim","split","bytes","replace","join","decodeURIComponent","xhr","pairs","getAllResponseHeaders","header","Response","bodyInit","status","ok","statusText","list","values","getAll","has","hasOwnProperty","callback","thisArg","keys","entries","clone","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"fetch-it.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetchIt\"] = factory();\n\telse\n\t\troot[\"fetchIt\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetchIt\"] = factory();\n\telse\n\t\troot[\"fetchIt\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(1);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar DEFAULT_CONFIG = {};\n\t\n\tfunction isFormData(o) {\n\t  return toString.call(o) === '[object FormData]';\n\t}\n\t\n\tfunction isURLSearchParams(o) {\n\t  return toString.call(o) === '[object URLSearchParams]';\n\t}\n\t\n\tfunction isBlob(o) {\n\t  return toString.call(o) === '[object Blob]';\n\t}\n\t\n\tvar FetchIt = function () {\n\t  function FetchIt(config) {\n\t    _classCallCheck(this, FetchIt);\n\t\n\t    this.config = config || DEFAULT_CONFIG;\n\t    this.middlewares = [];\n\t  }\n\t\n\t  _createClass(FetchIt, [{\n\t    key: '_createRequest',\n\t    value: function _createRequest(url, options, method, data) {\n\t      options = Object.assign({}, this.config, options || {});\n\t\n\t      var defaultMethod = !data && !options.body ? 'GET' : 'POST';\n\t\n\t      options.method = method || options.method || defaultMethod;\n\t      if (!!data) {\n\t        if (typeof data === 'string' || isFormData(data) || isURLSearchParams(data) || isBlob(data)) {\n\t          options.body = data;\n\t        } else {\n\t          try {\n\t            options.body = global.JSON.stringify(data);\n\t          } catch (e) {\n\t            options.body = data;\n\t          }\n\t        }\n\t      }\n\t\n\t      return new global.Request(url, options);\n\t    }\n\t  }, {\n\t    key: '_request',\n\t    value: function _request(urlOrRequest) {\n\t      var request = void 0;\n\t      if (urlOrRequest instanceof global.Request) {\n\t        request = urlOrRequest;\n\t      } else {\n\t        for (var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t          options[_key - 1] = arguments[_key];\n\t        }\n\t\n\t        request = this._createRequest.apply(this, [urlOrRequest].concat(options));\n\t      }\n\t\n\t      var promise = global.Promise.resolve(request);\n\t      var chain = [global.fetch, undefined];\n\t\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = this.middlewares[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var middleware = _step.value;\n\t\n\t          chain.unshift(middleware.request, middleware.requestError);\n\t          chain.push(middleware.response, middleware.responseError);\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      while (!!chain.length) {\n\t        promise = promise.then(chain.shift(), chain.shift());\n\t      }\n\t\n\t      return promise;\n\t    }\n\t  }, {\n\t    key: 'addMiddlewares',\n\t    value: function addMiddlewares(middlewares) {\n\t      var _middlewares;\n\t\n\t      (_middlewares = this.middlewares).push.apply(_middlewares, _toConsumableArray(middlewares));\n\t    }\n\t  }, {\n\t    key: 'clearMiddlewares',\n\t    value: function clearMiddlewares() {\n\t      this.middlewares = [];\n\t    }\n\t  }, {\n\t    key: 'fetch',\n\t    value: function fetch(url, options) {\n\t      return this._request(url, options);\n\t    }\n\t  }, {\n\t    key: 'get',\n\t    value: function get(url, options) {\n\t      return this._request(url, options, 'GET');\n\t    }\n\t  }, {\n\t    key: 'post',\n\t    value: function post(url, data, options) {\n\t      return this._request(url, options, 'POST', data);\n\t    }\n\t  }, {\n\t    key: 'patch',\n\t    value: function patch(url, data, options) {\n\t      return this._request(url, options, 'PATCH', data);\n\t    }\n\t  }, {\n\t    key: 'put',\n\t    value: function put(url, data, options) {\n\t      return this._request(url, options, 'PUT', data);\n\t    }\n\t  }, {\n\t    key: 'delete',\n\t    value: function _delete(url, options) {\n\t      return this._request(url, options, 'DELETE');\n\t    }\n\t  }, {\n\t    key: 'head',\n\t    value: function head(url, options) {\n\t      return this._request(url, options, 'HEAD');\n\t    }\n\t  }]);\n\t\n\t  return FetchIt;\n\t}();\n\t\n\tvar jsonMiddleware = {\n\t  response: function response(res) {\n\t    return res.json().catch(function (e) {\n\t      return e;\n\t    });\n\t  }\n\t};\n\t\n\tvar FetchItFactory = function () {\n\t  function FetchItFactory() {\n\t    _classCallCheck(this, FetchItFactory);\n\t\n\t    this.instance = new FetchIt();\n\t    this.middleware = {\n\t      jsonMiddleware: jsonMiddleware\n\t    };\n\t  }\n\t\n\t  _createClass(FetchItFactory, [{\n\t    key: 'create',\n\t    value: function create(config) {\n\t      return new FetchIt(config);\n\t    }\n\t  }, {\n\t    key: 'addMiddlewares',\n\t    value: function addMiddlewares(middlewares) {\n\t      this.instance.addMiddlewares(middlewares);\n\t    }\n\t  }, {\n\t    key: 'clearMiddlewares',\n\t    value: function clearMiddlewares() {\n\t      this.instance.clearMiddlewares();\n\t    }\n\t  }, {\n\t    key: 'fetch',\n\t    value: function fetch() {\n\t      var _instance;\n\t\n\t      return (_instance = this.instance).fetch.apply(_instance, arguments);\n\t    }\n\t  }, {\n\t    key: 'get',\n\t    value: function get() {\n\t      var _instance2;\n\t\n\t      return (_instance2 = this.instance).get.apply(_instance2, arguments);\n\t    }\n\t  }, {\n\t    key: 'post',\n\t    value: function post() {\n\t      var _instance3;\n\t\n\t      return (_instance3 = this.instance).post.apply(_instance3, arguments);\n\t    }\n\t  }, {\n\t    key: 'patch',\n\t    value: function patch() {\n\t      var _instance4;\n\t\n\t      return (_instance4 = this.instance).patch.apply(_instance4, arguments);\n\t    }\n\t  }, {\n\t    key: 'put',\n\t    value: function put() {\n\t      var _instance5;\n\t\n\t      return (_instance5 = this.instance).put.apply(_instance5, arguments);\n\t    }\n\t  }, {\n\t    key: 'delete',\n\t    value: function _delete() {\n\t      var _instance6;\n\t\n\t      return (_instance6 = this.instance).delete.apply(_instance6, arguments);\n\t    }\n\t  }, {\n\t    key: 'head',\n\t    value: function head() {\n\t      var _instance7;\n\t\n\t      return (_instance7 = this.instance).head.apply(_instance7, arguments);\n\t    }\n\t  }]);\n\t\n\t  return FetchItFactory;\n\t}();\n\t\n\texports.default = new FetchItFactory();\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// the whatwg-fetch polyfill installs the fetch() function\n\t// on the global object (window or self)\n\t//\n\t// Return that as the export for use in Webpack, Browserify etc.\n\t__webpack_require__(2);\n\tmodule.exports = self.fetch.bind(self);\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** fetch-it.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fc648498d6fe99b0d1c0\n **/","import 'isomorphic-fetch';\r\n\r\n\r\nconst DEFAULT_CONFIG = {};\r\n\r\n\r\nfunction isFormData(o) {\r\n  return toString.call(o) === '[object FormData]';\r\n}\r\n\r\nfunction isURLSearchParams(o) {\r\n  return toString.call(o) === '[object URLSearchParams]';\r\n}\r\n\r\nfunction isBlob(o) {\r\n  return toString.call(o) === '[object Blob]';\r\n}\r\n\r\n\r\nclass FetchIt {\r\n  constructor(config) {\r\n    this.config = config || DEFAULT_CONFIG;\r\n    this.middlewares = [];\r\n  }\r\n\r\n  _createRequest(url, options, method, data) {\r\n    options = Object.assign({}, this.config, options || {});\r\n\r\n    let defaultMethod = !data && !options.body ? 'GET' : 'POST';\r\n\r\n    options.method = method || options.method || defaultMethod;\r\n    if (!!data) {\r\n      if (typeof data === 'string' || isFormData(data) ||\r\n          isURLSearchParams(data) || isBlob(data)) {\r\n        options.body = data;\r\n      } else {\r\n        try {\r\n          options.body = global.JSON.stringify(data);\r\n        } catch (e) {\r\n          options.body = data;\r\n        }\r\n      }\r\n    }\r\n\r\n    return new global.Request(url, options);\r\n  }\r\n\r\n  _request(urlOrRequest, ...options) {\r\n    let request;\r\n    if (urlOrRequest instanceof global.Request) {\r\n      request = urlOrRequest;\r\n    } else {\r\n      request = this._createRequest(urlOrRequest, ...options);\r\n    }\r\n\r\n    let promise = global.Promise.resolve(request);\r\n    let chain = [global.fetch, undefined];\r\n\r\n    for (let middleware of this.middlewares) {\r\n      chain.unshift(middleware.request, middleware.requestError);\r\n      chain.push(middleware.response, middleware.responseError);\r\n    }\r\n\r\n    while (!!chain.length) {\r\n      promise = promise.then(chain.shift(), chain.shift());\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  addMiddlewares(middlewares) {\r\n    this.middlewares.push(...middlewares);\r\n  }\r\n\r\n  clearMiddlewares() {\r\n    this.middlewares = [];\r\n  }\r\n\r\n  fetch(url, options) {\r\n    return this._request(url, options);\r\n  }\r\n\r\n  get(url, options) {\r\n    return this._request(url, options, 'GET');\r\n  }\r\n\r\n  post(url, data, options) {\r\n    return this._request(url, options, 'POST', data);\r\n  }\r\n\r\n  patch(url, data, options) {\r\n    return this._request(url, options, 'PATCH', data);\r\n  }\r\n\r\n  put(url, data, options) {\r\n    return this._request(url, options, 'PUT', data);\r\n  }\r\n\r\n  delete(url, options) {\r\n    return this._request(url, options, 'DELETE');\r\n  }\r\n\r\n  head(url, options) {\r\n    return this._request(url, options, 'HEAD');\r\n  }\r\n}\r\n\r\n\r\nlet jsonMiddleware = {\r\n  response(res) {\r\n    return res.json().catch((e) => {\r\n      return e;\r\n    });\r\n  }\r\n};\r\n\r\n\r\nclass FetchItFactory {\r\n  constructor() {\r\n    this.instance = new FetchIt();\r\n    this.middleware = {\r\n      jsonMiddleware\r\n    };\r\n  }\r\n\r\n  create(config) {\r\n    return new FetchIt(config);\r\n  }\r\n\r\n  addMiddlewares(middlewares) {\r\n    this.instance.addMiddlewares(middlewares);\r\n  }\r\n\r\n  clearMiddlewares() {\r\n    this.instance.clearMiddlewares();\r\n  }\r\n\r\n  fetch(...args) {\r\n    return this.instance.fetch(...args);\r\n  }\r\n\r\n  get(...args) {\r\n    return this.instance.get(...args);\r\n  }\r\n\r\n  post(...args) {\r\n    return this.instance.post(...args);\r\n  }\r\n\r\n  patch(...args) {\r\n    return this.instance.patch(...args);\r\n  }\r\n\r\n  put(...args) {\r\n    return this.instance.put(...args);\r\n  }\r\n\r\n  delete(...args) {\r\n    return this.instance.delete(...args);\r\n  }\r\n\r\n  head(...args) {\r\n    return this.instance.head(...args);\r\n  }\r\n}\r\n\r\n\r\nexport default new FetchItFactory();\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/fetch-it.js\n **/","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isomorphic-fetch/fetch-npm-browserify.js\n ** module id = 1\n ** module chunks = 0\n **/","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/whatwg-fetch/fetch.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}